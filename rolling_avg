/* Using this dataset, show the SQL query to find the rolling 3 day average transaction amount for each day in January 2021. */

CREATE TABLE transactions (
  "transaction_time" TIMESTAMP,
  "transaction_amount" FLOAT
);

INSERT INTO transactions
  ("transaction_time", "transaction_amount")
VALUES
  ('2021-01-16 00:05:54.000000', '25.05'),
  ('2021-01-07 20:53:04.000000', '124.00'),
  ('2021-01-18 22:55:37.000000', '66.58'),
  ('2021-01-21 00:36:57.000000', '9.99'),
  ('2021-01-19 06:31:10.000000', '22.27'),
  ('2021-01-10 01:24:04.000000', '576.76'),
  ('2021-01-04 00:07:27.000000', '49.91'),
  ('2021-01-25 20:36:17.000000', '14.11'),
  ('2021-01-08 21:11:16.000000', '112.21'),
  ('2021-01-07 00:06:21.000000', '331.80'),
  ('2021-01-18 09:30:10.000000', '900.00'),
  ('2021-01-22 20:30:14.000000', '130.72'),
  ('2021-01-18 00:06:21.000000', '91.53'),
  ('2021-01-01 09:29:56.000000', '900.00'),
  ('2021-01-13 20:50:02.000000', '33.04'),
  ('2021-01-05 00:06:15.000000', '142.30'),
  ('2021-01-09 01:02:40.000000', '15.00'),
  ('2021-01-12 05:49:02.000000', '28.25'),
  ('2021-01-03 00:03:22.000000', '14.69'),
  ('2021-01-05 00:49:45.000000', '93.25'),
  ('2021-01-12 20:38:30.000000', '500.00'),
  ('2021-01-31 00:09:01.000000', '23.10'),
  ('2021-01-11 10:56:16.000000', '75.64'),
  ('2021-01-30 00:04:01.000000', '6.75'),
  ('2021-01-04 11:35:53.000000', '4.99'),
  ('2021-01-29 05:39:47.000000', '33.73'),
  ('2021-01-08 06:37:49.000000', '143.12'),
  ('2021-01-07 00:48:07.000000', '20.00'),
  ('2021-01-24 11:01:21.000000', '1058.40'),
  ('2021-01-21 04:41:26.000000', '500.00'),
  ('2021-01-05 21:34:58.000000', '100.00'),
  ('2021-01-06 00:48:00.000000', '362.91'),
  ('2021-01-13 00:51:59.000000', '19.24'),
  ('2021-01-17 00:10:53.000000', '32.46'),
  ('2021-01-20 01:04:34.000000', '32.76'),
  ('2021-01-30 07:55:26.000000', '59.37'),
  ('2021-01-03 11:03:52.000000', '36.37'),
  ('2021-01-21 19:33:01.000000', '12.99'),
  ('2021-01-30 00:58:25.000000', '400.00'),
  ('2021-01-14 06:14:03.000000', '900.00'),
  ('2021-01-26 00:02:21.000000', '900.00'),
  ('2021-01-01 00:12:28.000000', '5000.00'),
  ('2021-01-26 04:45:44.000000', '900.00'),
  ('2021-01-23 04:31:41.000000', '623.72'),
  ('2021-01-25 08:48:28.000000', '33.05'),
  ('2021-01-18 01:20:23.000000', '48.75'),
  ('2021-01-22 00:41:55.000000', '47.00'),
  ('2021-01-28 00:05:20.000000', '35.00'),
  ('2021-01-29 00:06:33.000000', '1450.00'),
  ('2021-01-16 00:44:31.000000', '82.38'),
  ('2021-01-31 13:00:35.000000', '19.00'),
  ('2021-01-11 01:18:30.000000', '2130.54'),
  ('2021-01-20 05:44:23.000000', '13.02'),
  ('2021-01-27 19:50:22.000000', '150.00'),
  ('2021-01-15 00:04:12.000000', '641.37'),
  ('2021-01-19 01:10:40.000000', '235.44'),
  ('2021-01-27 00:37:59.000000', '216.99'),
  ('2021-01-27 04:53:20.000000', '54.35'),
  ('2021-01-19 00:04:03.000000', '99.95'),
  ('2021-01-06 20:49:50.000000', '57.08'),
  ('2021-01-17 12:39:03.000000', '22.75'),
  ('2021-01-05 06:24:32.000000', '500.00'),
  ('2021-01-31 01:56:35.000000', '17.33'),
  ('2021-01-11 21:35:49.000000', '10.66'),
  ('2021-01-13 06:38:51.000000', '9.99'),
  ('2021-01-15 00:53:48.000000', '450.00'),
  ('2021-01-28 00:39:16.000000', '27.92'),
  ('2021-01-17 01:21:03.000000', '13.61'),
  ('2021-01-02 11:07:27.000000', '84.31'),
  ('2021-01-19 19:55:26.000000', '15.10'),
  ('2021-01-24 01:27:27.000000', '47.90'),
  ('2021-01-12 00:48:20.000000', '8413.94'),
  ('2021-01-09 00:02:48.000000', '118.49'),
  ('2021-01-15 06:18:10.000000', '900.00'),
  ('2021-01-22 00:05:13.000000', '23.04'),
  ('2021-01-03 01:32:21.000000', '3.00'),
  ('2021-01-14 00:04:24.000000', '9.99'),
  ('2021-01-22 05:29:08.000000', '326.24'),
  ('2021-01-10 11:05:01.000000', '43.55'),
  ('2021-01-02 01:14:35.000000', '513.00'),
  ('2021-01-20 00:03:47.000000', '14.23'),
  ('2021-01-13 00:03:52.000000', '429.11'),
  ('2021-01-28 04:39:11.000000', '37.17'),
  ('2021-01-26 00:40:51.000000', '500.00'),
  ('2021-01-04 21:14:08.000000', '889.46'),
  ('2021-01-21 23:53:40.000000', '43.99'),
  ('2021-01-24 00:06:29.000000', '59.00'),
  ('2021-01-08 00:04:24.000000', '60.46'),
  ('2021-01-06 06:49:28.000000', '16.41'),
  ('2021-01-14 21:09:48.000000', '100.00'),
  ('2021-01-04 01:45:23.000000', '340.80'),
  ('2021-01-20 19:46:38.000000', '90.00'),
  ('2021-01-16 06:35:34.000000', '29.00'),
  ('2021-01-26 19:52:38.000000', '704.47'),
  ('2021-01-09 10:44:29.000000', '900.00'),
  ('2021-01-21 00:07:15.000000', '59.00'),
  ('2021-01-29 00:43:11.000000', '17.82'),
  ('2021-01-25 00:04:42.000000', '119.95'),
  ('2021-01-23 00:35:56.000000', '500.00'),
  ('2021-01-27 00:01:48.000000', '50.00'),
  ('2021-01-28 19:44:55.000000', '8874.32'),
  ('2021-01-29 20:37:37.000000', '19.35'),
  ('2021-01-06 00:04:15.000000', '8.20'),
  ('2021-01-14 00:40:59.000000', '2.84'),
  ('2021-01-12 00:06:22.000000', '1516.39'),
  ('2021-01-07 06:31:13.000000', '500.00'),
  ('2021-01-10 00:04:58.000000', '131.44'),
  ('2021-01-23 00:02:24.000000', '103.20'),
  ('2021-01-25 01:21:44.000000', '123.84'),
  ('2021-01-11 00:06:39.000000', '87.10'),
  ('2021-01-01 02:01:09.000000', '518.20'),
  ('2021-01-15 20:55:58.000000', '47.72'),
  ('2021-01-02 00:09:43.000000', '49.00'),
  ('2021-01-08 00:49:22.000000', '31.61');


---


**Query #1**
/* 1) First we need to restructure the data in order to get the total transactions by day.
      The output of this query gives one row per date, along with the sum of transactions per day. */ 

    select
        -- outputs one row per date, and the total transaction amt per date
        cast(transaction_time as Date) As Date
        , SUM(transaction_amount) as total_transaction_amount  
    from transactions
    Group by cast(transaction_time as date) 
    -- ordering by date creates a clean structure and makes it clear to QA that there is 1 record per date. it also makes it easy to prep for the next step (getting the rolling avg)
    order by cast(transaction_time as date);

| date                     | total_transaction_amount |
| ------------------------ | ------------------------ |
| 2021-01-01T00:00:00.000Z | 6418.2                   |
| 2021-01-02T00:00:00.000Z | 646.31                   |
| 2021-01-03T00:00:00.000Z | 54.06                    |
| 2021-01-04T00:00:00.000Z | 1285.16                  |
| 2021-01-05T00:00:00.000Z | 835.55                   |
| 2021-01-06T00:00:00.000Z | 444.6                    |
| 2021-01-07T00:00:00.000Z | 975.8                    |
| 2021-01-08T00:00:00.000Z | 347.4                    |
| 2021-01-09T00:00:00.000Z | 1033.49                  |
| 2021-01-10T00:00:00.000Z | 751.75                   |
| 2021-01-11T00:00:00.000Z | 2303.94                  |
| 2021-01-12T00:00:00.000Z | 10458.58                 |
| 2021-01-13T00:00:00.000Z | 491.38                   |
| 2021-01-14T00:00:00.000Z | 1012.83                  |
| 2021-01-15T00:00:00.000Z | 2039.09                  |
| 2021-01-16T00:00:00.000Z | 136.43                   |
| 2021-01-17T00:00:00.000Z | 68.82                    |
| 2021-01-18T00:00:00.000Z | 1106.86                  |
| 2021-01-19T00:00:00.000Z | 372.76                   |
| 2021-01-20T00:00:00.000Z | 150.01                   |
| 2021-01-21T00:00:00.000Z | 625.97                   |
| 2021-01-22T00:00:00.000Z | 527                      |
| 2021-01-23T00:00:00.000Z | 1226.92                  |
| 2021-01-24T00:00:00.000Z | 1165.3                   |
| 2021-01-25T00:00:00.000Z | 290.95                   |
| 2021-01-26T00:00:00.000Z | 3004.47                  |
| 2021-01-27T00:00:00.000Z | 471.34                   |
| 2021-01-28T00:00:00.000Z | 8974.41                  |
| 2021-01-29T00:00:00.000Z | 1520.9                   |
| 2021-01-30T00:00:00.000Z | 466.12                   |
| 2021-01-31T00:00:00.000Z | 59.43                    |

---
**Query #2**
/* 2) After creating a CTE from step (1), we use a window function with 2 days preceeding to get the 3 day average.
      For January 31st, we can check our work by adding the total transactions from Jan 29, Jan 30, and Jan 31st,
      and divide by 3 ((1520.9+ 466.12+ 59.43)/ 3) = 682.15 = rolling_3day_avg where date = '2021-01-31. */

    with transactions_by_day as(
    	select
    	    cast(transaction_time as Date) As Date
    	    , SUM(transaction_amount) as total_transaction_amount  
    	from transactions
    	Group by cast(transaction_time as date) 
    	order by cast(transaction_time as date)
    )
    select *,
      -- window function gets rolling avg between the current day and the two days preceeding (3 day rolling avg)
      avg(total_transaction_amount) OVER(ORDER BY date
         ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)
         as rolling_3day_avg
    from transactions_by_day;

| date                     | total_transaction_amount | rolling_3day_avg |
| ------------------------ | ------------------------ | ---------------- |
| 2021-01-01T00:00:00.000Z | 6418.2                   | 6418.2           |
| 2021-01-02T00:00:00.000Z | 646.31                   | 3532.255         |
| 2021-01-03T00:00:00.000Z | 54.06                    | 2372.85666666667 |
| 2021-01-04T00:00:00.000Z | 1285.16                  | 661.843333333333 |
| 2021-01-05T00:00:00.000Z | 835.55                   | 724.923333333333 |
| 2021-01-06T00:00:00.000Z | 444.6                    | 855.103333333333 |
| 2021-01-07T00:00:00.000Z | 975.8                    | 751.983333333333 |
| 2021-01-08T00:00:00.000Z | 347.4                    | 589.266666666667 |
| 2021-01-09T00:00:00.000Z | 1033.49                  | 785.563333333333 |
| 2021-01-10T00:00:00.000Z | 751.75                   | 710.88           |
| 2021-01-11T00:00:00.000Z | 2303.94                  | 1363.06          |
| 2021-01-12T00:00:00.000Z | 10458.58                 | 4504.75666666667 |
| 2021-01-13T00:00:00.000Z | 491.38                   | 4417.96666666667 |
| 2021-01-14T00:00:00.000Z | 1012.83                  | 3987.59666666667 |
| 2021-01-15T00:00:00.000Z | 2039.09                  | 1181.1           |
| 2021-01-16T00:00:00.000Z | 136.43                   | 1062.78333333333 |
| 2021-01-17T00:00:00.000Z | 68.82                    | 748.113333333333 |
| 2021-01-18T00:00:00.000Z | 1106.86                  | 437.37           |
| 2021-01-19T00:00:00.000Z | 372.76                   | 516.146666666667 |
| 2021-01-20T00:00:00.000Z | 150.01                   | 543.21           |
| 2021-01-21T00:00:00.000Z | 625.97                   | 382.913333333333 |
| 2021-01-22T00:00:00.000Z | 527                      | 434.326666666667 |
| 2021-01-23T00:00:00.000Z | 1226.92                  | 793.296666666667 |
| 2021-01-24T00:00:00.000Z | 1165.3                   | 973.073333333333 |
| 2021-01-25T00:00:00.000Z | 290.95                   | 894.39           |
| 2021-01-26T00:00:00.000Z | 3004.47                  | 1486.90666666667 |
| 2021-01-27T00:00:00.000Z | 471.34                   | 1255.58666666667 |
| 2021-01-28T00:00:00.000Z | 8974.41                  | 4150.07333333333 |
| 2021-01-29T00:00:00.000Z | 1520.9                   | 3655.55          |
| 2021-01-30T00:00:00.000Z | 466.12                   | 3653.81          |
| 2021-01-31T00:00:00.000Z | 59.43                    | 682.15           |

---
**Query #3**
/* 3) Optional Final step: We can specify January 31st by including a filter where date = '2021-01-31'. 
      Typically, I would stop at step (2) since it would allow us to check our work. However, in the event the dataset is too large
      to view all the data, it is important to remember that another CTE must be created before we filter.  */

    with transactions_by_day as(
    	select
    	    cast(transaction_time as Date) As Date
    	    , SUM(transaction_amount) as total_transaction_amount  
    	from transactions
    	Group by cast(transaction_time as date) 
    	order by cast(transaction_time as date)
    ),
    rolling_avgs as (
    select *,
      avg(total_transaction_amount) OVER(ORDER BY date
         ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)
         as rolling_3day_avg
    from transactions_by_day
    )
    select date, rolling_3day_avg
    from rolling_avgs
    where date = '2021-01-31';

| date                     | rolling_3day_avg |
| ------------------------ | ---------------- |
| 2021-01-31T00:00:00.000Z | 682.15           |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/fufVxMKne1xMNHCbFoANMo/0)
